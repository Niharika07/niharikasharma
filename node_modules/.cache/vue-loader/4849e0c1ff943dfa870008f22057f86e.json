{"remainingRequest":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\src\\components\\OSS.vue?vue&type=template&id=fe769ce2&","dependencies":[{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\src\\components\\OSS.vue","mtime":1610267171499},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGF0dHJzOiB7IGlkOiAib3NzIiB9IH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJiLWNhcmQiLAogICAgICAgIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJiLW1vZGFsIiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1iLW1vZGFsLm1vZGFsT1NTIiwKICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgbW9kYWxPU1M6IHRydWUgfQogICAgICAgICAgICB9CiAgICAgICAgICBdLAogICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0yIHNoYWRvdyBib3JkZXItMCIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICB3aWR0aDogIjMwcmVtIiwKICAgICAgICAgICAgaGVpZ2h0OiAiMjRyZW0iLAogICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICIjRjU2NDc2IiwKICAgICAgICAgICAgY29sb3I6ICJ3aGl0ZSIsCiAgICAgICAgICAgICJmb250LWZhbWlseSI6ICInTW9udHNlcnJhdC1MaWdodCciCiAgICAgICAgICB9LAogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgdmFyaWFudDogInByaW1hcnkiLAogICAgICAgICAgICB0aXRsZTogIk9wZW4gU291cmNlIGluIE9yZ2FuaXphdGlvbnMiLAogICAgICAgICAgICAiaW1nLWFsdCI6ICJJbWFnZSIsCiAgICAgICAgICAgICJpbWctdG9wIjogIiIsCiAgICAgICAgICAgIHRhZzogImFydGljbGUiLAogICAgICAgICAgICAiZm9vdGVyLXRhZyI6ICJmb290ZXIiLAogICAgICAgICAgICAiZm9vdGVyLWJnLXZhcmlhbnQiOiAibGlnaHQiLAogICAgICAgICAgICAiZm9vdGVyLWNsYXNzIjogImFiYyIKICAgICAgICAgIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgX3ZtLnNob3dPU1MgPSB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBzY29wZWRTbG90czogX3ZtLl91KFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIGtleTogImZvb3RlciIsCiAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgICAiZm9udC1mYW1pbHkiOiAiJ01vbnRzZXJyYXQtUmVndWxhciciLAogICAgICAgICAgICAgICAgICAgICAgICAiZm9udC1zaXplIjogIjE1cHgiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICIgSG93IHRvIG1lYXN1cmUgT3BlbiBTb3VyY2UgbWF0dXJpdHkgb2Ygb3JnYW5pemF0aW9ucz8gIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzbWFsbCIsIFtfdm0uX3YoIiBSZXNlYXJjaCIpXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHByb3h5OiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIF0pCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiYi1pbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyIsCiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvT1NTL29zcy5wbmciKSwKICAgICAgICAgICAgICB3aWR0aDogIjIzMHB4IiwKICAgICAgICAgICAgICBoZWlnaHQ6ICIyMDBweCIKICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImItbW9kYWwiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJtb2RhbE9TUyIsIHNpemU6ICJ4bCIgfSwKICAgICAgICAgICAgICBzY29wZWRTbG90czogX3ZtLl91KFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiAibW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImItYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmxvYXQtcmlnaHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHZhcmlhbnQ6ICJ3YXJuaW5nIiwgc2l6ZTogIm1kIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93T1NTID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAga2V5OiAibW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInctMTAwIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiIzAwYzJjYiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmb250LWZhbWlseSI6ICInTW9udHNlcnJhdC1SZWd1bGFyJyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfYygiaDEiLCBbX3ZtLl92KCIgT3BlbiBTb3VyY2UgaW4gT3JnYW5pemF0aW9ucyAiKV0pXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgcHJveHk6IHRydWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5zaG93T1NTLAogICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICBfdm0uc2hvd09TUyA9ICQkdgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzaG93T1NTIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJkZXNjIG10LTMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJ1IiwgeyBzdGF0aWNDbGFzczogInVuZGVyIiB9LCBbX3ZtLl92KCJBYm91dCB0aGUgUHJvamVjdCIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIHByaW1hcnkgb2JqZWN0aXZlIG9mIHRoaXMgcHJvamVjdCB3YXMgdG8gbGVhcm4gYWJvdXQgdGhlICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJvcGVuIHNvdXJjZSBtYXR1cml0eSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGluIG9yZ2FuaXphdGlvbnMuIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBPcGVuIHNvdXJjZSBtYXR1cml0eSBpcyB0byB1bmRlcnN0YW5kIGhvdyB0byBhc3Nlc3MgdGhlIGV4dGVudCB0byB3aGljaCBhIGNvbXBhbnk6ICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoIm9MIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlVzZXMgb3BlbiBzb3VyY2UuIildKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb250cmlidXRlcyB0byBleGlzdGluZyBwcm9qZWN0cy4iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlJlbGVhc2VzIHNvZnR3YXJlIGFzIG9wZW4gc291cmNlLiIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAiSGFzIGludGVybmFsIG1hbmFnZW1lbnQgYW5kIGdvdmVybmFuY2UgZm9yIG9wZW4gc291cmNlIHNvZnR3YXJlLiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRlc2MgbWwtNSBtci01IiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIxOXB4IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgdGVhbSB0cmllZCB0byBleHBsb3JlIGFuZCB1bmRlcnN0YW5kIHRoZSBmYWN0b3JzIHRoYXQgbWFrZSBvcGVuIHNvdXJjZSBwcm9qZWN0cyBzdWNjZXNzZnVsIGF0IGNlcnRhaW4gY29tcGFuaWVzLCBhbmQgZGV2aXNlIGEgc2VsZi1hc3Nlc3NtZW50IG1vZGVsIGZvciBjb21wYW5pZXMgdGhhdCBhc3BpcmUgdG8gYmVjb21lIGEgbWF0dXJlIG9wZW4gc291cmNlIG9yZ2FuaXphdGlvbi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiZGVzYyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygidSIsIHsgc3RhdGljQ2xhc3M6ICJ1bmRlciIgfSwgW192bS5fdigiUHJvY2VzcyBPdmVydmlldyIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgT3BlbiBzb3VyY2UgaXMgZmFzdCBiZWNvbWluZyBhbiBleGNlbGxlbnQgY2hhbm5lbCBmb3IgYnVpbGRpbmcgcmFwcG9ydCBpbiB0aGUgdGVjaG5pY2FsIGNvbW11bml0eSBhcyB3ZWxsIGFzIGZvciBhdHRyYWN0aW5nIHRhbGVudGVkIGluZGl2aWR1YWxzIHRvIGludGVyZXN0aW5nIHByb2plY3RzLCBob3dldmVyLCBub3QgYWxsIG9wZW4gc291cmNlIHByb2dyYW1zIGNhbiBiZSBjb25zaWRlcmVkIGFzIHN1Y2Nlc3NmdWwuIFRoZSB0ZWFtIHRoZXJlZm9yZSB3YW50ZWQgdG8gYW5hbHl6ZSBhbmQgdW5kZXJzdGFuZCB3aGF0IG1ha2VzIHRoZSBwcm9ncmFtIHN1Y2Nlc3NmdWwgaW4gY2VydGFpbiBvcmdhbml6YXRpb25zLCBhbmQgd2hhdCBsZXNzb25zIGNhbiBiZSBsZWFybmVkIGZyb20gdGhlbSwgc28gdGhhdCBtb3JlIG9yZ2FuaXphdGlvbnMgY2FuIHN0YXJ0IGFkb3B0aW5nIHByYWN0aWNlcyBhbmQgbWV0aG9kb2xvZ2llcyB0aGF0IGNhbiBsZWFkIHRoZW0gdG8gaGF2ZSBhIG1hdHVyZSBvcGVuIHNvdXJjZSBwcm9ncmFtLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJiLWltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGNlbnRlcjogIiIsCiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL09TUy9wcm9jZXNzMS5wbmciKSwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICI3NTBweCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiZGVzYyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygidSIsIHsgc3RhdGljQ2xhc3M6ICJ1bmRlciIgfSwgW192bS5fdigiQW5hbHlzaXMiKV0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZGVzYyBtbC01IG1yLTUgbXQtMiIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIHRlYW0gZmlyc3QgYW5hbHl6ZWQgZXhpc3RpbmcgT3BlbiBTb3VyY2UgTWF0dXJpdHkgTW9kZWxzIGZvciBvcmdhbml6YXRpb25zLCBzdWNoIGFzIHRoZSBRdWFsaXBzbyBPcGVuIE1hdHVyaXR5IE1vZGVsIChPTU0pIHRvIHVuZGVyc3RhbmQgd2hhdCBjb3VsZCBiZSBhIGdvb2QgZnJhbWV3b3JrIGZvciBvcmdhbml6YXRpb25zIHRvIGFzc2VzcyB0aGVpciBwcm9ncmFt4oCZcyBtYXR1cml0eSBsZXZlbC4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIHRlYW0gYWxzbyBsb29rZWQgYXQgZXhpc3Rpbmcgb3BlbiBzb3VyY2UgcHJvZ3JhbXMgYWNyb3NzIGRpZmZlcmVudCBvcmdhbml6YXRpb25zIC0gc29tZSB0aGF0IGFyZSBhbHJlYWR5IHBhcnQgb2YgdGhlIFRPRE8gZ3JvdXAgYW5kIHNvbWUgdGhhdCBhcmUgbm90LiBUaGlzIGhlbHBlZCB0aGUgdGVhbSB0byBsZWFybiBhYm91dCB0aGUgZ3VpZGVsaW5lcyB0aGF0IHRoZSBUT0RPIGdyb3VwIHByb3ZpZGVzIGZvciBvcmdhbml6YXRpb25zIHRvIHJ1biBhIHN1Y2Nlc3NmdWwgb3BlbiBzb3VyY2UgcHJvZ3JhbS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhyb3VnaCBvdXIgZXh0ZW5zaXZlIHJlc2VhcmNoLCB3ZSBkaXNjb3ZlcmVkIHRoYXQgdGhlcmUgd2VyZSBtb3JlIHRoYW4gMjAgZXZhbHVhdGlvbiBtZXRob2RzIGZvciBvcGVuIHNvdXJjZSBzb2Z0d2FyZSBidXQgdGhpZXIgaXMgc3RpbGwgbm8gZWFzeSBtZXRob2QgZm9yIG9yZ2FuaXphdGlvbnMgdG8gc2VsZi1hc3Nlc3MgdGhlaXIgc291cmNlIG1hdHVyaXR5LiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJkZXNjIG10LTMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJ1IiwgeyBzdGF0aWNDbGFzczogInVuZGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiRGVzaWduaW5nIHRoZSBzdXJ2ZXkiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIHRlYW0gdGhlbiBkZXNpZ25lZCBhIHN1cnZleSB0byBnYXRoZXIgaW5zaWdodHMgb24gdGhlIHVzZSBvZiBPcGVuIFNvdXJjZSBpbiB2YXJpb3VzIG9yZ2FuaXphdGlvbnMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZC1mbGV4IiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImp1c3RpZnktY29udGVudCI6ICJjZW50ZXIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiMzUgUGFydGljaXBhbnRzIGZyb20gNCBjb3VudHJpZXMgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL09TUy9wYXJ0aWNpcGFudHMucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjQ1MHB4IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgV2UgY2hvc2UgdG8gcGVyZm9ybSBhIGRpcHN0aWNrIHN1cnZleSBieSBhc2tpbmcgZGV2ZWxvcGVycywgb3BlbiBzb3VyY2UgcHJvZ3JhbSBtYW5hZ2VycywgY29udHJpYnV0b3JzLCBldGMuIG9uIHdoYXQgdGhleSB2YWx1ZSBtb3N0IGluIHRoZWlyIGNvbXBhbnnigJlzIG9wZW4gc291cmNlIHByb2dyYW1zLiBUaGUgZ29hbCB3YXMgdG8gZmluZCBvdXQgd2hpY2ggYXR0cmlidXRlcyBvciBxdWFsaXRpZXMgb2YgdGhlIG9wZW4gc291cmNlIHByb2dyYW0gdGhleSBsaWtlZCBvciBkaXNsaWtlZCBhYm91dCB0aGVpciBjdXJyZW50IG9yZ2FuaXphdGlvbiwgaG93IGVhc3kgaXQgaXMgZm9yIHRoZW0gdG8gdW5kZXJzdGFuZCB0aGUgb3BlbiBzb3VyY2UgcG9saWNpZXMgYXQgdGhlaXIgb3JnYW5pemF0aW9uLCBhbmQgd2hhdCBpcyB0aGVpciBzZWxmLXJhdGVkIHBlcmNlcHRpb24gYWJvdXQgdGhlIG1hdHVyaXR5IG9mIHRoZWlyIG9yZ2FuaXphdGlvbi4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQSBzZXQgb2YgcXVlc3Rpb25zIHdlcmUgdGhvdWdodGZ1bGx5IGNob3NlbiB0byBkZXRlcm1pbmUgdGhlIHJvbGUgb2Ygb3BlbiBzb3VyY2Ugc29mdHdhcmUgaW4gdGhlIHJlc3BvbmRlbnTigJlzIG9yZ2FuaXphdGlvbiwgYW5kIHdoYXQga2luZCBvZiBvcGVuIHNvdXJjZSBwcm9ncmFtcyB0aGVpciBvcmdhbml6YXRpb24gc3VwcG9ydGVkLiBJbiB0aGUgY29udGV4dCBvZiBPcGVuIFNvdXJjZSBkZXZlbG9wbWVudCwgdGhlIHJlc3BvbmRlbnRzIHdlcmUgYXNrZWQgdG8gc2VsZi1yYXRlIG9uIDQgY2F0ZWdvcmllczoiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygib0wiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiSW5jbHVzaW9uIGFuZCBUcmFuc3BhcmVuY3kiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlByb3RvY29scyBhbmQgUHJvY2Vzc2VzIildKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJQYXJ0aWNpcGF0aW9uIGFuZCBDb2xsYWJvcmF0aW9uIildKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDb21tdW5pdHkgYW5kIEZlZWRiYWNrIildKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJkZXNjIG10LTMiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJ1IiwgeyBzdGF0aWNDbGFzczogInVuZGVyIiB9LCBbX3ZtLl92KCJJbnNpZ2h0cyIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgQmFzZWQgb24gdGhlIHJlc3BvbnNlcywgaGVyZSBpcyBhIHBlcmNlbnRhZ2Ugb2YgcGFydGljaXBhbnRzIGZvciBmZXcgbGlzdGVkIGFjdGl2aXRpZXMgZnJvbSB0aGUgNCBjYXRlZ29yaWVzOiAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWltZyIsIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogIiIsCiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9PU1MvaW52b2x2ZW1lbnQucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjY1MHB4IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiZGVzYyBtdC0zIiB9LCBbCiAgICAgICAgICAgICAgICBfYygidSIsIHsgc3RhdGljQ2xhc3M6ICJ1bmRlciIgfSwgW192bS5fdigiQ29uY2VwdHVhbGl6ZSIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgRmluYWxseSwgdGhlIHRlYW0gcHV0IHRvZ2V0aGVyIHRoZSBjb25jZXB0IG9mIGEgcXVpY2sgYXNzZXNzbWVudCBmcmFtZXdvcmsgdG8gZW5hYmxlIG9yZ2FuaXphdGlvbnMgdG8gc2VsZi1hc3Nlc3MgdGhlaXIgb3BlbiBzb3VyY2UgbWF0dXJpdHkgbGV2ZWwgaW4gYSBzdGFuZGFyZGl6ZWQgd2F5IGFuZCB3ZSBjYWxsIHRoaXMg4oCcU0FUTU9PU00gLSBBIFNlbGYtQXNzZXNzbWVudCBUb29sIGZvciBNZWFzdXJpbmcgT3JnYW5pemF0aW9uYWwgT3BlbiBTb3VyY2UgTWF0dXJpdHku4oCdICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZGVzYyBtbC01IG1yLTUiLAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjE5cHgiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSB0b29sIHdvdWxkIGNvbnNpZGVyIG1hdHVyaXR5IGFjcm9zcyBtdWx0aXBsZSBvcmdhbml6YXRpb25hbCBhcmVhcyB0aGF0IGFyZSBrZXkgdG8gYnVpbGRpbmcgYW5kIHJldGFpbmluZyBhIHN1Y2Nlc3NmdWwgb3BlbiBzb3VyY2UgY3VsdHVyZSwgYW5kIGdlbmVyYXRlIGEgbWF0dXJpdHkgc2NvcmUgYmFzZWQgb24gdGhlIHdlaWdodGFnZSBhc3NvY2lhdGVkIHdpdGggZWFjaCBhcmVhLiBJbiB0aGUgdHJ1ZSBzcGlyaXQgb2Ygb3BlbiBzb3VyY2UsIGl0IHdvdWxkIGFsbG93IG9yZ2FuaXphdGlvbnMgYW5kIG9wZW4gc291cmNlIGVudGh1c2lhc3RzIHRvIGV2ZW4gcmVjb21tZW5kIG5ldyBjYXRlZ29yaWVzIG9yIHJlbW92ZSBvdXRkYXRlZCBjYXRlZ29yaWVzIGFuZCB2b3RlIG9uIHdlaWdodGFnZXMgYW5kIG1hdHVyaXR5IGxldmVscyBmcm9tIHRpbWUgdG8gdGltZS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgVGhlIGZpcnN0IHZlcnNpb24gdGhhdCBoYXMgYmVlbiBwdXQgdG9nZXRoZXIgYnkgdGhlIHRlYW0gY29uc2lkZXJzIHdlaWdodGFnZXMgZnJvbSBkaWZmZXJlbnQgY2F0ZWdvcmllcyBiYXNlZCBvbiB0aGUgcmVsYXRpdmUgaW1wb3J0YW5jZSBhbmQgdGhlaXIgYXNzb2NpYXRlZCBwZXJjZXB0aW9ucyB0b3dhcmRzIGFuIG9yZ2FuaXphdGlvbuKAmXMgbWF0dXJpdHkgYXMgdm90ZWQgYnkgaW5kaXZpZHVhbHMgaW4gdGhlIHN1cnZleS4iCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBZb3UgY2FuIHZpZXcgdGhlbSBoZXJlLiAiKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZGVzYyBtbC01IG1yLTUiLAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjE5cHgiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFRoZSB0b29sIHdvdWxkIGNvbnNpZGVyIG1hdHVyaXR5IGFjcm9zcyBhbGwgdGhlc2UgYXJlYXMgYW5kIGdpdmUgYSBtYXR1cml0eSBzY29yZS4gIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYi1pbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQgbXQtMiIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjogIiIsCiAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9PU1MvYXNzZXNzbWVudC5wbmciKSwKICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNjUwcHgiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImRlc2MgbWwtNSBtci01IiwKICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImZvbnQtc2l6ZSI6ICIxOXB4IiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBUaGUgdGVhbSBob3BlcyB0aGF0IGFzIG1vcmUgYW5kIG1vcmUgb3JnYW5pemF0aW9ucyBwZXJmb3JtIGFuIGFzc2Vzc21lbnQsIGFuZCBhcyB0aGUgc3lzdGVtIGxlYXJucyBhYm91dCBkaWZmZXJlbnQgb3JnYW5pemF0aW9ucywgdGhlIG9wZW4gc291cmNlIGNvbW11bml0eSBhcyBhIHdob2xlIHdvdWxkIGJlbmVmaXQgYXMgaXQgd291bGQgZmluZCBtb3JlIG1hdHVyZSBvcmdhbml6YXRpb25zIGluIHRoZSBvcGVuIHNvdXJjZSBzcGFjZS4gIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiaDIiLCB7IHN0YXRpY0NsYXNzOiAiZGVzYyIgfSwgWwogICAgICAgICAgICAgICAgX2MoInUiLCB7IHN0YXRpY0NsYXNzOiAidW5kZXIiIH0sIFtfdm0uX3YoIkxlYXJuaW5ncyIpXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJkZXNjIG1sLTUgbXItNSIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTlweCIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSXQgd2FzIGEgcHJpdmlsZWdlIHRvIGxlYXJuIGZyb20gUHJvZmVzc29yIFRvbnkgV2Fzc2VybWFuIHdobyBpcyBhIG1lbWJlciBvZiB0aGUgYm9hcmQgb2YgZGlyZWN0b3JzIG9mIHRoZSBPcGVuIFNvdXJjZSBJbml0aWF0aXZlLiBUaHJvdWdoIHRoaXMgcHJvamVjdCBJIGxlYXJudCA6IgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm10LTEiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoInRoZSBpbXBhY3Qgb2YgT3BlbiBzb3VyY2Ugb24gc29mdHdhcmUgaW5kdXN0cnkuIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoInRoZSBsaWNlbnNpbmcgYW5kIGNvbW1lcmNpYWxpemF0aW9uIGlzc3Vlcy4iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigidGhlIGNvcnBvcmF0ZSBzb2Z0d2FyZSBldmFsdWF0aW9uIHRlY2huaXF1ZXMuIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJJbiBnZW5lcmFsLCByZWdhcmRpbmcgc3VydmV5cywgcGVvcGxlIGRvbid0IGxpa2UgYW5zd2VyaW5nIGRlc2NyaXB0aXZlIHF1ZXN0aW9ucyEiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKQogICAgXSwKICAgIDEKICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}