{"remainingRequest":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\src\\components\\AccessContract.vue?vue&type=template&id=18a1d9c6&","dependencies":[{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\src\\components\\AccessContract.vue","mtime":1610267171484},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\C59564\\Documents\\Personal\\niharikasharma\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}